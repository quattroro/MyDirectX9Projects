#include <iostream>
#include <algorithm>
#include <queue>
#include <set>
using namespace std;

int Board[21][21] = { 0 };
int PBoard[21][21] = { 0 };
int result[5] = { 0 };
int max_size = 0;


bool CheckBoundaryLine(int curX, int curY, int x, int y, int d1, int d2)
{
	for (int a = 0; a <= d1; a++)
	{
		for (int b = 0; b <= d2; b++)
		{
			//Line1
			if (curX == x + a && curY == y - a)
			{
				return true;
			}
			//Line2
			else if (curX == x + b && curY == y + b)
			{
				return true;
			}
			//Line3
			else if (curX == x + d1 + b && curY == y - d1 + b)
			{
				return true;
			}
			//Line4
			else if (curX == x + d2 + a && curY == y + d2 - a)
			{
				return true;
			}
		}
	}

	return false;
}

// 각 구역들의 인구의 합을 계산
int CheckArea(int x, int y, int d1, int d2)
{
	for (int tempX = 1; tempX <= max_size; tempX++)
	{
		for (int tempY = 1; tempY <= max_size; tempY++)
		{
			//line
			if (CheckBoundaryLine(tempX, tempY, x, y, d1, d2))
			{
				result[4] += PBoard[tempY][tempX];
			}
			//sector 1
			else if (tempX >= 1 && tempX < x + d1 && tempY >= 1 && tempY <= y)
			{
				result[0] += PBoard[tempY][tempX];
			}
			// sector 2
			else if (tempX >= 1 && tempX <= x + d2 && tempY > y && tempY <= max_size)
			{
				result[1] += PBoard[tempY][tempX];
			}
			// sector 3
			else if (tempX >= x + d1 && tempX <= max_size && tempY >= 1 && tempY < y - d1 + d2)
			{
				result[2] += PBoard[tempY][tempX];
			}
			// sector 4
			else if (tempX > x + d2 && tempX <= max_size && tempY >= y - d1 + d2 && tempY <= max_size)
			{
				result[3] += PBoard[tempY][tempX];
			}
			// sector 5
			else
			{
				result[4] += PBoard[tempY][tempX];
			}
		}
	}
	int minval = 999999999;
	int maxval = 0;

	for (int i = 0; i < 5; i++)
	{
		minval = min(minval, result[i]);
		maxval = max(maxval, result[i]);
	}

	return maxval - minval;
}



int main()
{
	ios::sync_with_stdio(false);
	cin.tie(0); cout.tie(0);
	

	int n;
	int minr = 99999999999;

	cin >> max_size;


	for (int y = 1; y <= max_size; y++)
	{
		for (int x = 1; x <= max_size; x++)
		{
			cin >> PBoard[x][y];
		}
	}


	for (int x = 1; x <= max_size; x++)
	{
		for (int y = 1; y <= max_size; y++)
		{
			for (int d1 = 1; d1 <= max_size / 2; d1++)
			{
				for (int d2 = 1; d2 <= max_size / 2; d2++)
				{
					if (d1 >= 1 && d2 >= 1 && x >= 1 && x + d1 + d2 > x && max_size >= x + d1 + d2
						&& y - d1 >= 1 && y > y - d1 && y + d2 > y && max_size >= y + d2)
					{
						memset(result, 0, sizeof(int) * 5);
						minr = min(minr, CheckArea(x, y, d1, d2));
					}
				}
			}
		}
	}

	cout << minr;

	return 0;
}